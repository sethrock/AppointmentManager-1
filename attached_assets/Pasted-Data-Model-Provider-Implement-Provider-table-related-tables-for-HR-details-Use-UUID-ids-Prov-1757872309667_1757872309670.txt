Data Model (Provider)

Implement Provider table + related tables for HR details. Use UUID ids.

Provider (core)

id (uuid, pk)

first_name, last_name, preferred_name

photo_url (nullable)

email (unique), phone

job_title, department, manager_id (self-ref fk, nullable)

employment_type (enum: FULL_TIME, PART_TIME, CONTRACTOR, INTERN)

status (enum: ACTIVE, ON_LEAVE, TERMINATED)

is_archived (boolean, default false)

start_date, end_date (nullable)

office_location (string)

tags (string[]/jsonb)

bio (text, nullable)

created_at, updated_at

ProviderCredentials

provider_id fk

license_number, license_type, license_state, license_expires_on

certifications (jsonb array of {name, issuer, issued_on, expires_on})

ProviderCompensation

provider_id fk

pay_type (SALARY/HOURLY/OTHER)

rate_or_salary (numeric)

overtime_eligible (boolean)

ProviderContacts

provider_id fk

emergency_contact_name, emergency_contact_phone, relationship

ProviderDocuments

id uuid, provider_id fk

doc_type (W9, I9, OFFER_LETTER, NDA, LICENSE, OTHER)

file_url, uploaded_at

AuditLog

id uuid

actor_user_id

entity ("provider" | "provider_document")

entity_id

action ("CREATE"|"UPDATE"|"ARCHIVE"|"UNARCHIVE"|"DELETE"|"UPLOAD_DOC")

diff (jsonb of changed fields)

created_at

Provide Prisma schema + SQL migrations.

API Surface

Implement typed endpoints (REST or tRPC). All endpoints require auth; admin checks where noted.

GET /api/providers — list with query params:

q (search: name, email, phone, job_title, tags)

department, employment_type, status, is_archived

manager_id, has_credentials (bool)

sort (e.g., last_name.asc, created_at.desc)

page, page_size (default 1, 20)

Returns: items + total, page, page_size

POST /api/providers (ADMIN) — create provider

GET /api/providers/:id — detail

PUT /api/providers/:id (ADMIN) — update

PATCH /api/providers/:id/archive (ADMIN) — soft-archive

PATCH /api/providers/:id/unarchive (ADMIN) — unarchive

DELETE /api/providers/:id (ADMIN) — hard delete with safeguard (only if is_archived=true)

Documents:

POST /api/providers/:id/documents (ADMIN) — upload doc (returns file_url)

DELETE /api/providers/:id/documents/:docId (ADMIN)

Photo upload:

POST /api/uploads/provider-photo — accepts image, returns photo_url

Validate mime, size limit 5MB, auto-square crop option, store via configured adapter (Cloudinary/local)

Admin UI (Pages & Components)

/providers

Top bar: global search input (q), filters (Department, Employment Type, Status, Tags, Archived toggle), Sort select.

Directory grid (card view) + Table view toggle.

Cards show: avatar/photo, name, job title, department, status chip, tags.

Bulk actions (checkboxes): Archive, Unarchive, Export CSV, Delete (only archived).

Pagination footer.

/providers/new

Multi-step form: Core Info → Credentials → Compensation → Contacts → Review.

Photo uploader (drag & drop with preview), remove/replace.

Validate required fields; inline errors.

/providers/:id

Header: photo, name, title, department, status, action buttons: Edit, Archive/Unarchive, Delete (guard).

Tabs:

Overview: core fields, tags (editable chips).

Credentials: list/edit licenses & certs; expiring soon warning (<= 60 days).

Compensation

Contacts

Documents: upload/delete docs, show type, uploaded_at.

Activity: read-only AuditLog table.

/providers/:id/edit — same UI as create, prefilled.

Import/Export

Import CSV (admin only): map columns to fields, dry-run validator, per-row error report.

Export CSV of current filtered result set.

Behavior & Rules

Archive = soft delete (is_archived=true), hides from default lists; Unarchive reverses.

Delete allowed only when archived, with modal confirmation and type-to-confirm safeguard.

Names normalized (trim/case); phone normalized (E.164 backend).

Email unique; show friendly duplicate error.

Tags stored as string array; chips input with auto-complete from existing tags.

Credentials: show badge/warning for expiring/expired licenses.

Documents: accept PDF/JPG/PNG; virus/mime check; preview images.

Photo: square thumbnail generation (256x256) + original URL; handle transparent PNG.

Search is case-insensitive and tokenized across key fields.

Rate limiting on write endpoints (basic).

Access Control & Security

Only ADMIN can create/update/archive/unarchive/delete/import/export/upload docs.

STAFF can view directory and their own profile.

Server-side validation for all writes.

CSRF protection (if using forms), file type/size validation.

ENV-driven secrets: DATABASE_URL, CLOUDINARY_CLOUD_NAME, CLOUDINARY_API_KEY, CLOUDINARY_API_SECRET, UPLOAD_PROVIDER (cloudinary|local).

DX & Quality

Provide:

Prisma schema + migrations

Seed script creating:

10 sample providers (varied departments, statuses, photos)

1 expiring license scenario

Several documents and tags

Reusable React components: ProviderCard, PhotoUploader, TagInput, StatusPill, ConfirmDialog

Zod schemas (or equivalent) for provider DTOs

Unit tests for model validators and API handlers

E2E smoke tests for create→archive→unarchive→delete

Add a README with:

Setup on Replit (ENV vars, DB URL)

How to run migrations/seeds

How to switch photo adapter (Cloudinary vs local)

Admin demo credentials

API docs with example curl requests

Acceptance Criteria (must pass)

I can add a new provider with photo, credentials, compensation, contacts; it appears in the directory.

Global search and filters work together with pagination and sorting.

I can archive a provider; it disappears from default view and appears when “Archived” is toggled.

I can unarchive it and it returns to active lists.

I can only hard-delete an archived provider, with confirmation; deletion is reflected in DB.

Photo upload validates type & size and updates the avatar immediately.

Credentials expiring in ≤60 days show a warning badge.

CSV import validates and reports row-level errors without partial silent failures.

Export CSV respects current filters.

AuditLog records all admin actions with actor, timestamp, and changed fields.